const titleElement = document.getElementById("category-title");
const params = new URLSearchParams(window.location.search);
const newCategory = params.get("category"); // tshirt, hoodie, –∏ —Ç.–¥.

const categoryTitles = {
  bed: "–ü–æ—Å—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏",
  bryuchki: "–ë—Ä—é–∫–∏, –ë—Ä–∏–¥–∂–∏, –®–æ—Ä—Ç—ã",
  dresses: "–ü–ª–∞—Ç—å—è",
  hoodie: "–î–∂–µ–º–ø–µ—Ä—ã, –¢–æ–ª—Å—Ç–æ–≤–∫–∏, –ë–æ–º–±–µ—Ä—ã, –ñ–∏–ª–µ—Ç—ã",
  komplekty: "–ö–æ–º–ø–ª–µ–∫—Ç—ã –∂–µ–Ω—Å–∫–∏–µ",
  male: "–î–ª—è –º—É–∂—á–∏–Ω",
  nazapah: "–•–∞–ª–∞—Ç—ã –Ω–∞ –∑–∞–ø–∞—Ö",
  pajamas: "–ü–∏–∂–∞–º–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã –∂–µ–Ω—Å–∫–∏–µ",
  pugovki: "–•–∞–ª–∞—Ç—ã –Ω–∞ –ø—É–≥–æ–≤–∏—Ü–∞—Ö",
  sorochki: "–ü–µ–Ω—å—é–∞—Ä—ã, –ù–æ—á–Ω—ã–µ —Å–æ—Ä–æ—á–∫–∏",
  tshirt: "–ú–∞–π–∫–∏, –§—É—Ç–±–æ–ª–∫–∏, –õ–æ–Ω–≥—Å–ª–∏–≤—ã",
  zipka: "–•–∞–ª–∞—Ç—ã –Ω–∞ –º–æ–ª–Ω–∏–∏"
};

if (!newCategory) {
  alert("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞!");
  // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å redirect –Ω–∞ index.html
}



const productGrid = document.getElementById("product-grid");
  const pagination = document.getElementById("pagination");
  const modal = document.getElementById("modal");
  const modalName = document.getElementById("modal-name");
  const modalPrice = document.getElementById("modal-price");
  const modalDescription = document.getElementById("modal-description");
  const mediaDisplay = document.getElementById("media-display");
  const prevBtn = document.getElementById("prev-btn");
  const nextBtn = document.getElementById("next-btn");
  const modalClose = document.getElementById("modal-close");

  const openBookmarksBtn = document.getElementById("open-bookmarks");
  const bookmarksModal = document.getElementById("bookmarks-modal");
  const closeBookmarksBtn = document.getElementById("close-bookmarks");
  const bookmarkCount = document.getElementById("bookmark-count");
  const bookmarksItems = document.getElementById("bookmarks-items");
  const bookmarksEmpty = document.getElementById("bookmarks-empty");

  let products = [];             // –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
  let filteredProducts = [];     // —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  let currentCategory = null;    // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  let currentPage = 1;
  const productsPerPage = 9;
  let totalPages = 0;
  let currentProductIndex = 0;
  let currentImageIndex = 0;
  let bookmarks = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  updateBookmarkCount();

  async function loadProducts() {
    const files = [
      { file: 'data/bed.json', category: 'bed' },
      { file: 'data/bryuchki.json', category: 'bryuchki' },
      { file: 'data/dresses.json', category: 'dresses' },
      { file: 'data/hoodie.json', category: 'hoodie' },
      { file: 'data/komplekty.json', category: 'komplekty' },
      { file: 'data/male.json', category: 'male' },
      { file: 'data/nazapah.json', category: 'nazapah' },
      { file: 'data/pajamas.json', category: 'pajamas' },
      { file: 'data/pugovki.json', category: 'pugovki' },
      { file: 'data/sorochki.json', category: 'sorochki' },
      { file: 'data/tshirt.json', category: 'tshirt' },
      { file: 'data/zipka.json', category: 'zipka' }
    ];

    try {
     const allData = await Promise.all(
  files.map(async (f) => {
    try {
      const res = await fetch(f.file);
      if (!res.ok) throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${f.file}`);
      const json = await res.json();
      return json;
    } catch (err) {
      console.warn(err.message);
      return []; // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    }
  })
);

      // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      products = allData.flatMap((arr, i) =>
        arr.map(p => ({ ...p, category: files[i].category }))
      );

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
      products.sort((a, b) => {
        const order = { new: 0, old: 1, out: 2 };
        return order[a.status] - order[b.status];
      });

      // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, pajamas)
      setCategory(newCategory || 'index');

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
    }
  }

  loadProducts();

  function setCategory(category) {
  currentCategory = category;
  filteredProducts = products.filter(p => p.category === category);
  totalPages = Math.ceil(filteredProducts.length / productsPerPage);
  currentPage = 1;

  if (categoryTitles[category]) {
    titleElement.textContent = categoryTitles[category];
  } else {
    titleElement.textContent = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
  }

  renderPage();
}


function showSwipeHintOnce() {
  if (localStorage.getItem('swipeHintShown')) return;

  const hint = document.getElementById('swipe-hint');
  if (!hint) return;

  hint.style.display = 'block';
  localStorage.setItem('swipeHintShown', 'true');

  // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
  setTimeout(() => {
    swipeHint.remove();
  }, 3000);
}


function animateSliderImageChange(imgElement, newSrc) {
  imgElement.style.transition = "opacity 0.3s ease";
  imgElement.style.opacity = 0;
  setTimeout(() => {
    imgElement.src = newSrc;
    imgElement.style.opacity = 1;
  }, 300);
}


  function renderPage() {
    productGrid.innerHTML = "";
    const start = (currentPage - 1) * productsPerPage;
    const end = start + productsPerPage;
    const visibleProducts = filteredProducts.slice(start, end);

    visibleProducts.forEach(product => {
      const productCard = document.createElement("div");
      productCard.classList.add("product");

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –µ—â—ë –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å
if (start === 0 && product === visibleProducts[0] && !localStorage.getItem('swipeCardHintShown')) {
  const swipeHint = document.createElement("div");
  swipeHint.className = "card-swipe-hint";
  swipeHint.textContent = "üëÜ";
  productCard.appendChild(swipeHint);
  localStorage.setItem('swipeCardHintShown', 'true');
}

     

      const statusBadge = document.createElement("div");
      statusBadge.classList.add("status-badge", `status-${product.status}`);
      if (product.status === "new" || product.status === "out") {
        statusBadge.textContent = product.status === "new" ? "–ù–æ–≤–∏–Ω–∫–∞" : "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏";
        productCard.appendChild(statusBadge);

      }

      // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞
const sliderContainer = document.createElement("div");
sliderContainer.classList.add("slider-container");

// –ö–Ω–æ–ø–∫–∏ –≤–ª–µ–≤–æ / –≤–ø—Ä–∞–≤–æ
const leftArrow = document.createElement("button");
leftArrow.classList.add("slider-arrow", "left");
leftArrow.textContent = "‚Üê";

const rightArrow = document.createElement("button");
rightArrow.classList.add("slider-arrow", "right");
rightArrow.textContent = "‚Üí";

// –°–æ–∑–¥–∞—ë–º —Å–∞–º—É –∫–∞—Ä—Ç–∏–Ω–∫—É
const sliderImage = document.createElement("img");
sliderImage.loading = "lazy";
sliderImage.src = product.images && product.images.length > 0 ? product.images[0] : "cat2.png";
sliderImage.classList.add("slider-image");

let currentImageIndex = 0;

// –°–≤–∞–π–ø –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
let touchStartX = 0;
let touchStartY = 0;
let isSwiping = false;

sliderImage.addEventListener("touchstart", (e) => {
  touchStartX = e.changedTouches[0].screenX;
  touchStartY = e.changedTouches[0].screenY;
  isSwiping = false;
});

sliderImage.addEventListener("touchmove", (e) => {
  const touchMoveX = e.changedTouches[0].screenX;
  const touchMoveY = e.changedTouches[0].screenY;

  const diffX = Math.abs(touchMoveX - touchStartX);
  const diffY = Math.abs(touchMoveY - touchStartY);

  if (diffX > diffY) {
    isSwiping = true;
    e.preventDefault(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Å–≤–∞–π–ø–µ
  }
});

sliderImage.addEventListener("touchend", (e) => {
  if (!isSwiping) return;
  const touchEndX = e.changedTouches[0].screenX;
  const diff = touchStartX - touchEndX;
  if (Math.abs(diff) < 30) return;

  if (diff > 0) {
    currentImageIndex = (currentImageIndex + 1) % product.images.length;
  } else {
    currentImageIndex = (currentImageIndex - 1 + product.images.length) % product.images.length;
  }

  animateSliderImageChange(sliderImage, product.images[currentImageIndex]);

});



// –õ–∏—Å—Ç–∞–Ω–∏–µ –≤–ª–µ–≤–æ / –≤–ø—Ä–∞–≤–æ
leftArrow.onclick = (e) => {
  e.stopPropagation();
  currentImageIndex = (currentImageIndex - 1 + product.images.length) % product.images.length;
  animateSliderImageChange(sliderImage, product.images[currentImageIndex]);

};

rightArrow.onclick = (e) => {
  e.stopPropagation();
  currentImageIndex = (currentImageIndex + 1) % product.images.length;
  animateSliderImageChange(sliderImage, product.images[currentImageIndex]);
};

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫—É
sliderContainer.appendChild(leftArrow);
sliderContainer.appendChild(sliderImage);
sliderContainer.appendChild(rightArrow);
productCard.appendChild(sliderContainer);

      const productName = document.createElement("div");
      productName.classList.add("product-name");
      productName.textContent = product.name;
     


      const productPrice = document.createElement("div");
      productPrice.classList.add("product-price");
      productPrice.textContent = product.price;

     const bookmarkBtn = document.createElement("button");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö
const isBookmarked = bookmarks.some(b => {
  // bookmarks –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤
  if (typeof b === 'string') return b === product.id;
  return b.id === product.id;
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å
bookmarkBtn.classList.add("bookmark-btn", isBookmarked ? "remove" : "add");
bookmarkBtn.textContent = isBookmarked ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏";

bookmarkBtn.onclick = (e) => {
  e.stopPropagation(); // –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª–∫—É —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
const isCurrentlyBookmarked = bookmarks.some(b => {
    if (typeof b === 'string') return b === product.id;
    return b.id === product.id;
  });

  if (isCurrentlyBookmarked) {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫
    bookmarks = bookmarks.filter(b => {
      if (typeof b === 'string') return b !== product.id;
      return b.id !== product.id;
    });
    localStorage.setItem("bookmarks", JSON.stringify(bookmarks));
    updateBookmarkCount();
    renderPage(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  } else {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    showColorSelectModal(product, (selectedColors) => {
      addToBookmarks(product, selectedColors);
      renderPage(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    });
  }
};

    
      productCard.appendChild(productName);
   
      productCard.appendChild(productPrice);
      productCard.appendChild(bookmarkBtn);
      

      productCard.onclick = () => {
        openModal(product);
      };

      productGrid.appendChild(productCard);
    });

    renderPagination();
  }

  function renderPagination() {
  pagination.innerHTML = "";
  const paginationContainer = document.createElement("div");
  paginationContainer.style.display = "flex";
  paginationContainer.style.alignItems = "center";
  paginationContainer.style.justifyContent = "center";

  // –ö–Ω–æ–ø–∫–∞ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const firstButton = document.createElement("button");
  firstButton.textContent = "‚èÆ";
  firstButton.disabled = currentPage === 1;
  firstButton.onclick = () => {
    currentPage = 1;
    renderPage();
  };
  paginationContainer.appendChild(firstButton);

  // –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
  const prevButton = document.createElement("button");
  prevButton.textContent = "‚Üê –ù–∞–∑–∞–¥";
  prevButton.disabled = currentPage === 1;
  prevButton.onclick = () => {
    currentPage--;
    renderPage();
  };
  paginationContainer.appendChild(prevButton);

  // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const pageInfo = document.createElement("div");
  pageInfo.textContent = `${currentPage} –∏–∑ ${totalPages}`;
  pageInfo.style.margin = "0 10px";
  paginationContainer.appendChild(pageInfo);

  // –ö–Ω–æ–ø–∫–∞ –í–ø–µ—Ä—ë–¥
  const nextButton = document.createElement("button");
  nextButton.textContent = "–í–ø–µ—Ä—ë–¥ ‚Üí";
  nextButton.disabled = currentPage === totalPages;
  nextButton.onclick = () => {
    currentPage++;
    renderPage();
  };
  paginationContainer.appendChild(nextButton);

  // –ö–Ω–æ–ø–∫–∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const lastButton = document.createElement("button");
  lastButton.textContent = "‚è≠";
  lastButton.disabled = currentPage === totalPages;
  lastButton.onclick = () => {
    currentPage = totalPages;
    renderPage();
  };
  paginationContainer.appendChild(lastButton);

  pagination.appendChild(paginationContainer);
}


  function updateBookmarkCount() {
    bookmarkCount.textContent = bookmarks.length;
  }

  function openModal(product) {
    currentProductIndex = products.findIndex(p => p.id === product.id);
    currentImageIndex = 0;
   modal.style.display = "flex";
modalName.textContent = product.name;
modalPrice.textContent = product.price;
modalDescription.textContent = product.description;
updateMediaDisplay(product);

// –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–≤–∞–π–ø–∞ –≤ –º–æ–¥–∞–ª–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
const swipeHint = document.getElementById("swipe-hint");
if (!localStorage.getItem("swipeHintShown")) {
  swipeHint.style.display = "block";
  localStorage.setItem("swipeHintShown", "true");
  setTimeout(() => {
    swipeHint.style.display = "none";
  }, 3000);
} else {
  swipeHint.style.display = "none";
}


showSwipeHintOnce(); 

    prevBtn.onclick = () => showMedia(product, "prev");
    nextBtn.onclick = () => showMedia(product, "next");
  }

  function updateMediaDisplay(product) {
  mediaDisplay.innerHTML = "";

  if (!product.images || product.images.length === 0) {
    mediaDisplay.textContent = "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π";
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
  const img = document.createElement("img");
  img.src = product.images[currentImageIndex];
  img.classList.add("modal-slider-image");
  img.style.transition = "opacity 0.3s ease";
  mediaDisplay.appendChild(img);

  let touchStartX = 0;
let touchStartY = 0;
let isSwiping = false;

img.addEventListener("touchstart", (e) => {
  touchStartX = e.changedTouches[0].screenX;
  touchStartY = e.changedTouches[0].screenY;
  isSwiping = false;
});

img.addEventListener("touchmove", (e) => {
  const touchMoveX = e.changedTouches[0].screenX;
  const touchMoveY = e.changedTouches[0].screenY;

  if (Math.abs(touchMoveX - touchStartX) > Math.abs(touchMoveY - touchStartY)) {
    isSwiping = true;
    e.preventDefault(); // –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
  }
});

img.addEventListener("touchend", (e) => {
  if (!isSwiping) return;

  const touchEndX = e.changedTouches[0].screenX;
  const diff = touchStartX - touchEndX;

  if (Math.abs(diff) < 30) return;

  if (diff > 0) {
    // –í–ø–µ—Ä—ë–¥
    currentImageIndex = (currentImageIndex + 1) % product.images.length;
  } else {
    // –ù–∞–∑–∞–¥
    currentImageIndex = (currentImageIndex - 1 + product.images.length) % product.images.length;
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  img.style.opacity = 0;
  setTimeout(() => {
    img.src = product.images[currentImageIndex];
    img.style.opacity = 1;
  }, 200);
});

}




  function showMedia(product, direction) {
  if (!product.images || product.images.length === 0) return;

  if (direction === "prev") {
    currentImageIndex = (currentImageIndex - 1 + product.images.length) % product.images.length;
  } else if (direction === "next") {
    currentImageIndex = (currentImageIndex + 1) % product.images.length;
  }
  updateMediaDisplay(product);
}


  modalClose.onclick = () => modal.style.display = "none";
  window.onclick = (event) => {
    if (event.target === modal) {
      modal.style.display = "none";
    }
  };

  openBookmarksBtn.onclick = () => {
    bookmarksModal.style.display = "flex";
    renderBookmarks();
  };

  closeBookmarksBtn.onclick = () => bookmarksModal.style.display = "none";

  function renderBookmarks() {
  bookmarksItems.innerHTML = "";

  if (bookmarks.length === 0) {
    bookmarksEmpty.style.display = "block";
    return;
  }

  bookmarksEmpty.style.display = "none";

  bookmarks.forEach(bookmark => {
    const product = products.find(p => p.id === bookmark.id);
    if (!product) return;

    const item = document.createElement("div");
    item.classList.add("bookmark-item");

    const thumb = document.createElement("img");
    thumb.src = product.images[0];
    thumb.classList.add("bookmark-thumb");

    const name = document.createElement("span");
    name.textContent = product.name;

    const colorInfo = document.createElement("div");
    colorInfo.textContent = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞: " + (bookmark.selectedColors?.join(", ") || "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã");

    const removeBtn = document.createElement("button");
    removeBtn.textContent = "–£–¥–∞–ª–∏—Ç—å";
    removeBtn.onclick = () => {
      bookmarks = bookmarks.filter(b => b.id !== bookmark.id);
      localStorage.setItem("bookmarks", JSON.stringify(bookmarks));
      updateBookmarkCount();
      renderBookmarks();
      renderPage();
    };

    item.appendChild(thumb);
    item.appendChild(name);
    item.appendChild(colorInfo);
    item.appendChild(removeBtn);
    bookmarksItems.appendChild(item);
  });
}
function showColorSelectModal(product, onConfirm) {
  const modal = document.getElementById('color-select-modal');
  const optionsContainer = document.getElementById('color-options');
  optionsContainer.innerHTML = '';

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
  product.colors.forEach(color => {
    const label = document.createElement('label');
    label.innerHTML = `
      <input type="checkbox" value="${color}" />
      ${color}
    `;
    optionsContainer.appendChild(label);
  });

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
  modal.style.display = 'flex';

  const confirmBtn = document.getElementById('confirm-colors');
  const cancelBtn = document.getElementById('cancel-colors');

  const closeModal = () => {
    modal.style.display = 'none';
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  confirmBtn.onclick = () => {
    const selectedColors = Array.from(
      optionsContainer.querySelectorAll('input:checked')
    ).map(cb => cb.value);

    if (selectedColors.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ü–≤–µ—Ç.');
      return;
    }

    onConfirm(selectedColors);
    closeModal();
  };

  cancelBtn.onclick = () => {
    closeModal();
  };

}
// –ü—Ä–∏–º–µ—Ä: –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –≥–¥–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏"
button.classList.add('bookmark-btn', 'add');
button.innerText = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏';
button.onclick = () => {
  showColorSelectModal(product, (selectedColors) => {
    // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
    addToBookmarks(product, selectedColors);
  });
};

function addToBookmarks(product, selectedColors) {
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  bookmarks = bookmarks.filter(b => {
    if (typeof b === 'string') return b !== product.id;
    return b.id !== product.id;
  });

  const newBookmark = {
    id: product.id,
    name: product.name,
    image: product.images?.[0],
    price: product.price,
    selectedColors: selectedColors
  };

  bookmarks.push(newBookmark);
  localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
  updateBookmarkCount();
}






